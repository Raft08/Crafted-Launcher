import com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer

plugins {
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

dependencies {
    // Utilities
    implementation "fr.atlasworld.common:common:${common_version}"
    implementation "com.github.oshi:oshi-core:${oshi_version}"

    // Logging
    implementation "org.apache.logging.log4j:log4j-core:${log4j_version}"
    implementation "org.apache.logging.log4j:log4j-api:${log4j_version}"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4j_version}"

    // UI
    implementation "com.dlsc.gemsfx:gemsfx:$gemsfx_version"
}

shadowJar {
    manifest {
        attributes 'Main-Class': "${main_class}"
    }
    transform(Log4j2PluginsCacheFileTransformer)
    archiveClassifier.set('')
    archiveBaseName.set("AtlasNetwork")
}

javafx {
    version = java_version
    modules = [ 'javafx.controls', 'javafx.graphics']
}

build {
    dependsOn shadowJar
}

jar {
    enabled = false
}

tasks.register("prepareRun") {
    group "run"

    dependsOn build

    doLast {
        def runDir = file("run")

        // Create running directory if needed.
        if (!runDir.isDirectory())
            runDir.mkdirs()
    }
}

tasks.register("run", JavaExec) {
    group "run"
    dependsOn prepareRun

    workingDir = new File(project.rootDir, "run")
    mainClass.set("${main_class}")
    classpath = files(shadowJar.archiveFile)
    standardInput = System.in
    args "--dev"
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group = project.group
    version = project.version

    repositories {
        mavenCentral()
        maven {
            url "https://repository.atlasworld.fr/repository/maven-public/"
        }
        maven {
            url "https://sandec.jfrog.io/artifactory/repo"
        }
    }

    eclipse {
        classpath {
            downloadSources = true
        }
    }

    idea {
        module {
            downloadSources = true
        }
    }

    compileJava {
        options.encoding = "UTF-8"
    }

    java {
        toolchain.languageVersion.set(JavaLanguageVersion.of(java_version))
    }
}

